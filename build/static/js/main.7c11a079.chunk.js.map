{"version":3,"sources":["Global/Context.js","Global/Constants.js","Pages/Dashboard/Dashboard.js","Pages/Login/Login.js","App.js","index.js"],"names":["LoginContext","createContext","getStatus","localStorage","getItem","Dashboard","Login","loginFailure","failResponse","alert","clear","window","location","reload","loginSuccess","successResponse","a","googleId","wa","email","profileObj","fullName","name","firstName","givenName","imageUrl","slice","setItem","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","status","message","catch","error","className","clientId","onSuccess","onFailure","buttonText","cookiePolicy","App","useState","loggedIn","setLoggedIn","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAEaA,EAAeC,wBAAc,ICF7BC,EAAY,WACvB,QAAIC,aAAaC,QAAQ,c,OCDZ,SAASC,IACtB,OACE,8BACE,yCAAYF,aAAaC,QAAQ,a,wCCCxB,SAASE,IACtB,IAAMC,EAAe,SAACC,GACpBC,MAAM,kCACNN,aAAaO,QACbC,OAAOC,SAASC,UAGZC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAAWF,EAAgBG,GAC3BC,EAAQJ,EAAgBK,WAAWD,MACnCE,EAAWN,EAAgBK,WAAWE,KACtCC,EAAYR,EAAgBK,WAAWI,UACvCC,EAAWV,EAAgBK,WAAWK,SAASC,MAAM,GAG3DvB,aAAawB,QAAQ,YAAaZ,EAAgBG,IAClDf,aAAawB,QAAQ,OAAQZ,EAAgBK,WAAWI,WACxDrB,aAAawB,QAAQ,QAASZ,EAAgBK,WAAWK,UAXtC,UAabG,MAAM,gDAAiD,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,oBAEVC,KAAMC,KAAKC,UAAU,CACnBjB,SAAUA,EACVE,MAAOA,EACPE,SAAUA,EACVE,UAAWA,EACXE,SAAUA,MAGXU,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACC,GACc,OAAfA,EAAIE,QACN7B,MAAM2B,EAAIG,SACV5B,OAAOC,SAASC,WAEhBJ,MAAM2B,EAAIG,SACVpC,aAAaO,QACbC,OAAOC,SAASC,aAGnB2B,OAAM,SAACC,GACNlC,OAzCe,4CAAH,sDA6ClB,OACE,qBAAKmC,UAAU,QAAf,SACE,cAAC,cAAD,CACEA,UAAU,YACVC,SAAS,4EACTC,UAAW9B,EACX+B,UAAWtC,EACXuC,WAAW,oBACXC,aAAc,yBCtCPC,MAlBf,WACE,MAAgCC,mBAAS/C,GAAzC,mBAAOgD,EAAP,KAAiBC,EAAjB,KAEA,OAAID,EAEA,cAAClD,EAAaoD,SAAd,CAAuBC,MAAO,CAAEH,WAAUC,eAA1C,SACE,cAAC9C,EAAD,MAKF,cAACL,EAAaoD,SAAd,CAAuBC,MAAO,CAAEH,WAAUC,eAA1C,SACE,cAAC,EAAD,OCfRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c11a079.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({});\r\nexport const NameContext = createContext({});\r\n","export const getStatus = () => {\r\n  if (localStorage.getItem(\"google_id\")) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","export default function Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Hello, {localStorage.getItem(\"name\")}</h1>\r\n    </div>\r\n  );\r\n}\r\n","import { GoogleLogin } from \"react-google-login\";\r\n\r\nimport \"./Login.css\";\r\n\r\nexport default function Login() {\r\n  const loginFailure = (failResponse) => {\r\n    alert(\"Login Failed, please try again\");\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const loginSuccess = async (successResponse) => {\r\n    //Fields stored in DataBase\r\n    const googleId = successResponse.wa;\r\n    const email = successResponse.profileObj.email;\r\n    const fullName = successResponse.profileObj.name;\r\n    const firstName = successResponse.profileObj.givenName;\r\n    const imageUrl = successResponse.profileObj.imageUrl.slice(8);\r\n\r\n    //Adding to Local Storage\r\n    localStorage.setItem(\"google_id\", successResponse.wa);\r\n    localStorage.setItem(\"name\", successResponse.profileObj.givenName);\r\n    localStorage.setItem(\"image\", successResponse.profileObj.imageUrl);\r\n\r\n    await fetch(\"https://tiffingrades-api.herokuapp.com/signup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        googleId: googleId,\r\n        email: email,\r\n        fullName: fullName,\r\n        firstName: firstName,\r\n        imageUrl: imageUrl,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (res.status === \"OK\") {\r\n          alert(res.message);\r\n          window.location.reload();\r\n        } else {\r\n          alert(res.message);\r\n          localStorage.clear();\r\n          window.location.reload();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        loginFailure(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <GoogleLogin\r\n        className=\"login-btn\"\r\n        clientId=\"1029185512831-qvr0he0tk57qv6t8mp35f7t200vnn8jb.apps.googleusercontent.com\"\r\n        onSuccess={loginSuccess}\r\n        onFailure={loginFailure}\r\n        buttonText=\"Login with Google\"\r\n        cookiePolicy={\"single_host_origin\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\n\nimport { LoginContext } from \"./Global/Context\";\nimport { getStatus } from \"./Global/Constants\";\n\nimport Dashboard from \"./Pages/Dashboard/Dashboard\";\nimport Login from \"./Pages/Login/Login\";\n\nfunction App() {\n  const [loggedIn, setLoggedIn] = useState(getStatus);\n\n  if (loggedIn) {\n    return (\n      <LoginContext.Provider value={{ loggedIn, setLoggedIn }}>\n        <Dashboard />\n      </LoginContext.Provider>\n    );\n  } else {\n    return (\n      <LoginContext.Provider value={{ loggedIn, setLoggedIn }}>\n        <Login />\n      </LoginContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}