{"version":3,"sources":["Global/Context.js","Global/Constants.js","Pages/Dashboard/Dashboard.js","Pages/Login/Login.js","App.js","index.js"],"names":["LoginContext","createContext","getStatus","localStorage","getItem","Dashboard","Login","loginFailure","failResponse","alert","clear","window","location","reload","loginSuccess","successResponse","a","googleId","email","profileObj","fullName","name","firstName","givenName","imageUrl","slice","setItem","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","status","message","catch","error","className","clientId","onSuccess","onFailure","buttonText","cookiePolicy","App","useState","loggedIn","setLoggedIn","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAEaA,EAAeC,wBAAc,ICF7BC,EAAY,WACvB,QAAIC,aAAaC,QAAQ,c,OCDZ,SAASC,IACtB,OACE,8BACE,yCAAYF,aAAaC,QAAQ,a,wCCCxB,SAASE,IACtB,IAAMC,EAAe,SAACC,GACpBC,MAAM,kCACNN,aAAaO,QACbC,OAAOC,SAASC,UAGZC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAAWF,EAAgBE,SAC3BC,EAAQH,EAAgBI,WAAWD,MACnCE,EAAWL,EAAgBI,WAAWE,KACtCC,EAAYP,EAAgBI,WAAWI,UACvCC,EAAWT,EAAgBI,WAAWK,SAASC,MAAM,GAG3DtB,aAAauB,QAAQ,YAAaX,EAAgBE,UAClDd,aAAauB,QAAQ,OAAQX,EAAgBI,WAAWI,WACxDpB,aAAauB,QAAQ,QAASX,EAAgBI,WAAWK,UAXtC,UAabG,MAAM,UAAW,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,oBAEVC,KAAMC,KAAKC,UAAU,CACnBhB,SAAUA,EACVC,MAAOA,EACPE,SAAUA,EACVE,UAAWA,EACXE,SAAUA,MAGXU,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACC,GACc,OAAfA,EAAIE,QACN5B,MAAM0B,EAAIG,SACV3B,OAAOC,SAASC,WAEhBJ,MAAM0B,EAAIG,SACVnC,aAAaO,QACbC,OAAOC,SAASC,aAGnB0B,OAAM,SAACC,GACNjC,OAzCe,4CAAH,sDA6ClB,OACE,qBAAKkC,UAAU,QAAf,SACE,cAAC,cAAD,CACEA,UAAU,YACVC,SAAS,4EACTC,UAAW7B,EACX8B,UAAWrC,EACXsC,WAAW,oBACXC,aAAc,yBCtCPC,MAlBf,WACE,MAAgCC,mBAAS9C,GAAzC,mBAAO+C,EAAP,KAAiBC,EAAjB,KAEA,OAAID,EAEA,cAACjD,EAAamD,SAAd,CAAuBC,MAAO,CAAEH,WAAUC,eAA1C,SACE,cAAC7C,EAAD,MAKF,cAACL,EAAamD,SAAd,CAAuBC,MAAO,CAAEH,WAAUC,eAA1C,SACE,cAAC,EAAD,OCfRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f7c785a6.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({});\r\nexport const NameContext = createContext({});\r\n","export const getStatus = () => {\r\n  if (localStorage.getItem(\"google_id\")) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n","export default function Dashboard() {\r\n  return (\r\n    <div>\r\n      <h1>Hello, {localStorage.getItem(\"name\")}</h1>\r\n    </div>\r\n  );\r\n}\r\n","import { GoogleLogin } from \"react-google-login\";\r\n\r\nimport \"./Login.css\";\r\n\r\nexport default function Login() {\r\n  const loginFailure = (failResponse) => {\r\n    alert(\"Login Failed, please try again\");\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const loginSuccess = async (successResponse) => {\r\n    //Fields stored in DataBase\r\n    const googleId = successResponse.googleId;\r\n    const email = successResponse.profileObj.email;\r\n    const fullName = successResponse.profileObj.name;\r\n    const firstName = successResponse.profileObj.givenName;\r\n    const imageUrl = successResponse.profileObj.imageUrl.slice(8);\r\n\r\n    //Adding to Local Storage\r\n    localStorage.setItem(\"google_id\", successResponse.googleId);\r\n    localStorage.setItem(\"name\", successResponse.profileObj.givenName);\r\n    localStorage.setItem(\"image\", successResponse.profileObj.imageUrl);\r\n\r\n    await fetch(\"/signup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        googleId: googleId,\r\n        email: email,\r\n        fullName: fullName,\r\n        firstName: firstName,\r\n        imageUrl: imageUrl,\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        if (res.status === \"OK\") {\r\n          alert(res.message);\r\n          window.location.reload();\r\n        } else {\r\n          alert(res.message);\r\n          localStorage.clear();\r\n          window.location.reload();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        loginFailure(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <GoogleLogin\r\n        className=\"login-btn\"\r\n        clientId=\"1029185512831-qvr0he0tk57qv6t8mp35f7t200vnn8jb.apps.googleusercontent.com\"\r\n        onSuccess={loginSuccess}\r\n        onFailure={loginFailure}\r\n        buttonText=\"Login with Google\"\r\n        cookiePolicy={\"single_host_origin\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nimport { LoginContext } from \"./Global/Context\";\r\nimport { getStatus } from \"./Global/Constants\";\r\n\r\nimport Dashboard from \"./Pages/Dashboard/Dashboard\";\r\nimport Login from \"./Pages/Login/Login\";\r\n\r\nfunction App() {\r\n  const [loggedIn, setLoggedIn] = useState(getStatus);\r\n\r\n  if (loggedIn) {\r\n    return (\r\n      <LoginContext.Provider value={{ loggedIn, setLoggedIn }}>\r\n        <Dashboard />\r\n      </LoginContext.Provider>\r\n    );\r\n  } else {\r\n    return (\r\n      <LoginContext.Provider value={{ loggedIn, setLoggedIn }}>\r\n        <Login />\r\n      </LoginContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}